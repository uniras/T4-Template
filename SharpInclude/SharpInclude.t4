<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections.Specialized" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#+
    static class SharpIncludeDefines
    {
        public static string StartComment = "/*";
        public static string EndComment = "*/";
        public static string LineComment = "//";
        public static string DisableStartComment = "/**";
        public static string DisableEndComment = "**/";
        public static string DisableLineComment = "///";

        public static string SharpIncludeStartDelim = @"//<(\+\++|--+|\*\*+)";
        public static string SharpIncludeEndDelim = @"//(\+\++|--+|\*\*+)>";

        public static string StartDelim = "<" + "#";
        public static string EndDelim = "#" + ">";
        public static string StartFeatureDelim = StartDelim + "+";
        public static string EndFeatureDelim = EndDelim;

        public static string EnableStartDelim = "<*#";
        public static string EnableEndDelim = "#*>";

        public static Regex SliceBlockRegex;

        static SharpIncludeDefines()
        {
            SliceBlockRegex = new Regex(SharpIncludeDefines.SharpIncludeStartDelim + @"(\S*)(\s*?)([\s\S]*?)([ \t]*?)" + SharpIncludeDefines.SharpIncludeEndDelim);
        }
    }

    string SharpInclude()
    {
        return SharpInclude(Host.TemplateFile);
    }

    string SharpInclude(string file)
    {
        return SharpInclude(file, "");
    }

    string SharpInclude(string file, string pos)
    {
        return SharpInclude(file, pos, true);
    }

    string SharpInclude(string file, bool inusing)
    {
        return SharpInclude(file, "", inusing);
    }

    string SharpInclude(string file, string pos, bool inusing)
    {
        return SharpIncludeFile(file, pos, inusing, false);
    }

    string SharpIncludeList(params string[] files)
    {
        StringBuilder UsingSource = new StringBuilder();
        StringBuilder BlockSource = new StringBuilder();

        System.Environment.CurrentDirectory = Path.GetDirectoryName(Host.TemplateFile);
        for (int i = 0; i < files.Length; i++)
        {
            string src = File.ReadAllText(files[i]);
            UsingSource.Append(src + Environment.NewLine);
            BlockSource.Append(src);
        }

        return SharpIncludeGetUsingString(UsingSource.ToString()) + SharpIncludeString(BlockSource.ToString(), "", false, false);
    }

    string SharpIncludeListPos(NameValueCollection files)
    {
        StringBuilder UsingSource = new StringBuilder();
        StringBuilder BlockSource = new StringBuilder();

        System.Environment.CurrentDirectory = Path.GetDirectoryName(Host.TemplateFile);
        foreach (string key in files.AllKeys)
        {
            foreach (string val in files.GetValues((string)key))
            {
                string src = File.ReadAllText(key);
                UsingSource.Append(src + Environment.NewLine);
                BlockSource.Append(SharpIncludeGetPos(src, val) + Environment.NewLine);
            }
        }

        return SharpIncludeGetUsingString(UsingSource.ToString()) + SharpIncludeString(BlockSource.ToString(), "", false, false);
    }

    string SharpMixin(string file)
    {
        return SharpMixin(file, "");
    }

    string SharpMixin(string file, string pos)
    {
        return SharpIncludeFile(file, pos, false, true);
    }

    string SharpMixinList(params string[] files)
    {
        StringBuilder BlockSource = new StringBuilder();
        for (int i = 0; i < files.Length; i++)
        {
            BlockSource.Append(SharpIncludeFile(files[i], "", false, true));
        }
        return BlockSource.ToString();
    }

    string SharpIncludeFile(string file, string pos, bool inusing, bool mixin)
    {
        return SharpIncludeString(SharpIncludeReadFile(file), pos, inusing, mixin);
    }

    string SharpIncludeString(string src, string pos, bool inusing, bool mixin)
    {
        StringBuilder ret = new StringBuilder();
        StringBuilder fblock = new StringBuilder();
        StringBuilder cblock = new StringBuilder();
        StringBuilder dblock = new StringBuilder();

        Match match = SharpIncludeDefines.SliceBlockRegex.Match(src);
        while (match.Success)
        {
            Group grp = match.Groups[4];
            Group name = match.Groups[2];
            if (pos.Length == 0 || pos.Equals(name.ToString()))
            {
                if (!mixin)
                {
                    Match blank = Regex.Match(grp.ToString(), @"^\s+$");
                    if (grp.Length > 0 && !blank.Success)
                    {
                        Group type = match.Groups[1];
                        if (type.ToString()[0] == '+')
                        {
                            fblock.Append(grp);
                        }
                        else if (type.ToString()[0] == '-')
                        {
                            cblock.Append(grp);
                        }
                        else
                        {
                            dblock.Append(grp);
                        }
                    }
                }
                else
                {
                    ret.Append(grp);
                }
            }
            match = match.NextMatch();
        }

        if (!mixin)
        {
            if (fblock.Length > 0)
            {
                ret.Insert(0, SharpIncludeDefines.StartFeatureDelim + Environment.NewLine);
                ret.Append(fblock.ToString());
                ret.Append(Environment.NewLine + SharpIncludeDefines.EndFeatureDelim);
            }
            if(cblock.Length > 0)
            {
                ret.Insert(0, Environment.NewLine + SharpIncludeDefines.EndDelim);
                ret.Insert(0, cblock.ToString());
                ret.Insert(0, SharpIncludeDefines.StartDelim + Environment.NewLine);
            }
            if (dblock.Length > 0)
            {
                string RepString = Regex.Replace(dblock.ToString(), Regex.Escape(SharpIncludeDefines.EndDelim + SharpIncludeDefines.EndComment) + @"\S+", SharpIncludeDefines.EndDelim + SharpIncludeDefines.EndComment);
                dblock.Clear().Append(RepString);

                dblock.Replace(SharpIncludeDefines.EnableStartDelim, SharpIncludeDefines.StartDelim);
                dblock.Replace(SharpIncludeDefines.EnableEndDelim, SharpIncludeDefines.EndDelim);
                dblock.Replace(SharpIncludeDefines.DisableLineComment + SharpIncludeDefines.StartDelim, SharpIncludeDefines.StartDelim + SharpIncludeDefines.LineComment);
                dblock.Replace(SharpIncludeDefines.DisableStartComment + SharpIncludeDefines.StartDelim, SharpIncludeDefines.StartDelim + SharpIncludeDefines.StartComment);
                dblock.Replace(SharpIncludeDefines.EndDelim + SharpIncludeDefines.DisableEndComment, SharpIncludeDefines.EndComment + SharpIncludeDefines.EndDelim);
                dblock.Replace(SharpIncludeDefines.StartComment + SharpIncludeDefines.StartDelim, SharpIncludeDefines.StartDelim);
                dblock.Replace(SharpIncludeDefines.EndDelim + SharpIncludeDefines.EndComment, SharpIncludeDefines.EndDelim);
                dblock.Replace(SharpIncludeDefines.LineComment + SharpIncludeDefines.StartDelim, SharpIncludeDefines.StartDelim);

                ret.Insert(0, dblock.ToString());
            }
        }

        if (inusing)
        {
            ret.Insert(0, SharpIncludeGetUsingString(src) + Environment.NewLine);
        }

        return ret.ToString();
    }

    string SharpIncludeGetPos(string src, string pos)
    {
        StringBuilder ret = new StringBuilder();
        Match match = SharpIncludeDefines.SliceBlockRegex.Match(src);
        while (match.Success)
        {
            Group name = match.Groups[2];
            if (pos.Length == 0 || pos.Equals(name.ToString()))
            {
                ret.Append(match.Groups[0].ToString() + Environment.NewLine);
            }
            match = match.NextMatch();
        }
        return ret.ToString();
    }

    string SharpIncludeGetUsingString(string src)
    {
        StringBuilder ret = new StringBuilder();
        List<string> implist = new List<string>();
        bool init = true;
        Regex regex = new Regex(@"[ \t]*using[ \t]+([_a-zA-z][_a-zA-Z0-9\.]*);");
        Match match = regex.Match(src);
        while (match.Success)
        {
            Group grp = match.Groups[1];
            if(implist.IndexOf(grp.ToString()) == -1)
            {
                if (init)
                {
                    init = false;
                }
                else
                {
                    ret.Append(Environment.NewLine);
                }
                ret.Append(SharpIncludeDefines.StartDelim + "@ import namespace=\"" + grp.ToString() + "\" " + SharpIncludeDefines.EndDelim);
                implist.Add(grp.ToString());
            }  
            match = match.NextMatch();
        }
        return ret.ToString();
    }

    string SharpIncludeGetUsingFile(string file)
    {
        return SharpIncludeGetUsingString(SharpIncludeReadFile(file));
    }

    string SharpIncludeReadFile(string file)
    {
        System.Environment.CurrentDirectory = Path.GetDirectoryName(Host.TemplateFile);
        return File.ReadAllText(file);
    }
#>